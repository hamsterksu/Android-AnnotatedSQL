/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the AnnotatedSQL library.
 */
package ${pkgName};

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import android.database.Cursor;
import android.database.CursorWrapper;
import android.provider.BaseColumns;

public abstract class AbstractCursorWrapper extends CursorWrapper {

	private Map<String, Integer> mColumnIndexes = new HashMap<String, Integer>();
	
    AbstractCursorWrapper(Cursor cursor) {
        super(cursor);
    }

    public long getId() {
        return getLong(BaseColumns._ID);
    }

    protected long getLong(String colName) {
        final int index = getCachedColumnIndexOrThrow(colName);
        return getLong(index);
    }

    protected int getInt(String colName) {
        final int index = getCachedColumnIndexOrThrow(colName);
        return getInt(index);
    }

    protected boolean getBoolean(String colName) {
        return getInt(colName) == 1;
    }

    protected double getDouble(String colName) {
        final int index = getCachedColumnIndexOrThrow(colName);
        return getDouble(index);
    }

    protected float getFloat(String colName) {
        final int index = getCachedColumnIndexOrThrow(colName);
        return getFloat(index);
    }

    protected int getCachedColumnIndexOrThrow(String colName) {
      	Integer index = mColumnIndexes.get(colName);
          if (index == null) {
          	index = getColumnIndexOrThrow(colName);
        	mColumnIndexes.put(colName, Integer.valueOf(index));
          }
          return index.intValue();
    }

    protected Integer getIntegerOrNull(String colName) {
       final int index = getCachedColumnIndexOrThrow(colName);
        if (isNull(index)) {
            return null;
        }
        return Integer.valueOf(getInt(index));
    }
    
    protected Long getLongOrNull(String colName) {
        final int index = getCachedColumnIndexOrThrow(colName);
        if (isNull(index)) {
            return null;
        }
        return Long.valueOf(getLong(index));
    }
    
    protected Float getFloatOrNull(String colName) {
        final int index = getCachedColumnIndexOrThrow(colName);
        if (isNull(index)) {
            return null;
        }
        return Float.valueOf(getFloat(index));
    }
    
    protected Double getDoubleOrNull(String colName) {
        final int index = getCachedColumnIndexOrThrow(colName);
        if (isNull(index)) {
            return null;
        }
        return Double.valueOf(getDouble(index));
    }

    protected Boolean getBooleanOrNull(String colName) {
        final int index = getCachedColumnIndexOrThrow(colName);
        if (isNull(index)) {
            return null;
        }
        return Boolean.valueOf(getInt(colName) == 1);
    }

    protected Date getDate(String colName) {
        final int index = getCachedColumnIndexOrThrow(colName);
        if (isNull(index)) {
            return null;
        }
        return new Date(getLong(index));
    }

    protected String getString(String columnName) {
        final Integer index = getCachedColumnIndexOrThrow(columnName);
        if (isNull(index)) {
            return null;
        }
        return getString(index);
    }

    protected byte[] getBlob(String colName){
        final int index = getCachedColumnIndexOrThrow(colName);
        return getBlob(index);
    }
}